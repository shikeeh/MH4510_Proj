wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.21,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.2,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.3,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.22,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.2223,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.23,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.24,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.25,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.27,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.28,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.29,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 40)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 50)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 70)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
selected_var_2
data.frame(selected_var_2)
sum(importance_matrix_2$Gain[1:200])
selected_var_2 <- importance_matrix_2$Feature[1:200]
head(selected_var_2)
dtm_2 <- dtm %>% select(selected_var_2, Y)
set.seed(100)
ind <- runif(nrow(dtm_2)) < 0.8
train_dtm2 <- dtm_2[ind , ]
test_dtm2 <- dtm_2[!ind , ]
cat("Dimensions of the training set are", dim(train_dtm2), "\n")
cat("Dimensions of the test set are", dim(test_dtm2), "\n")
train_dtm2 <- xgb.DMatrix(data = as.matrix(train_dtm2[1:200]), label= train_dtm2$Y)
test_dtm2 <- xgb.DMatrix(data = as.matrix(test_dtm2[1:200]), label= test_dtm2$Y)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 15, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 17, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 18, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 19, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 20, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 22, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 23, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 24, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 25, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 26, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 27, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 28, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 29, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 15, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 16, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 14, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 25, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 26, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 27, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 24, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 23, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 22, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.3,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.2,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.5,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.25,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.26,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.24,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.27,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.28,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.29,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.30,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.28,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.27,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.27,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.27,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 45)
wl4 = list(train=train_dtm2, test=test_dtm2)
param4 <- list(max_depth = 21, eta = 0.27,
eval_metric = "rmse")
xgb_4 = xgb.train(param4, data = train_dtm2, watchlist=wl4, nrounds = 30)
data.frame(selected_var_2)
visualize_text(selected_var_2)
visualize_text <- function(x) {
# x is a character vector
# the function will extract
frequent_words <- termFreq(x)
frequent_words <- frequent_words[!(names(frequent_words) %in% stopwords())]
wordcloud(words = names(frequent_words),
freq = frequent_words, min.freq = 0,
max.words = 50, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
}
visualize_text(selected_var_2)
wordcloud(words = names(selected_var_2), freq = frequent_words, min.freq = 0,
random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = names(selected_var_2), freq = selected_var_2, min.freq = 0,
random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = names(data.frame(selected_var_2)), freq = data.frame(selected_var_2), min.freq = 0,
random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
word_freq <- termFreq(data.frame(selected_var_2))
word_freq <- termFreq(data.frame(selected_var_2))
D_clean$cleaned_text
class(D_clean$cleaned_text)
class(selected_var_2)
word_freq <- termFreq((selected_var_2)
word_freq <- termFreq(selected_var_2)
install.packages("earth")
install.packages("vip")
install.packages("pdp")
library(tidyverse)
library(tm)
library(wordcloud)
library(stringr)
library(GGally)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(scales)
library(text2vec)
library(caret)
library(fastDummies) # for creating dummy variables
library(randomForest)
library(Metrics)
# import data from local csv file
D <- read.csv("data_cleaned_2021.csv")
head(D)
names(D)
# Keep only alphabets and spaces, changing texts to lowercase, and create a new variable to store length of job description texts
D_clean <- D %>%
# create a new variable containing only lowercase text from Job.Description
mutate(cleaned_text = gsub("[^a-zA-Z0-9]", " ", Job.Description)) %>%
mutate(cleaned_text = gsub("\\n", " ", cleaned_text)) %>%
mutate(cleaned_text = tolower(cleaned_text)) %>%
# create a new variable containing length of job description texts
mutate('desc_len' = sapply(D$Job.Description, nchar))
head(D_clean)
# Function to convert "Competitors" variable from "-1" and strings to a count variable
my_strsplit <- function(string) {
if (string == -1){
output <- 0
} else {
output <- length(strsplit(toString(string), ", ")[[1]])
}}
# Apply the function and create a new variable comp_count
D_clean$comp_count <- sapply(D_clean$Competitors, my_strsplit)
# View head of variables 'Competitors' and 'comp_count'
head(D_clean[, c('Competitors', 'comp_count')])
#remove unnecessary columns
D_clean <- D_clean %>%
select(c(Rating, Avg.Salary.K., Age, desc_len, comp_count, cleaned_text))
head(D_clean)
summary(D_clean%>%select(c(Rating, Avg.Salary.K., Age, desc_len, comp_count)))
avg <- D_clean %>% filter(Rating >= 0)
D_clean$Rating[D_clean$Rating == -1] <- mean(avg$Rating)
ggplot(D_clean, aes(x=Rating)) +
geom_histogram(fill = "blue", alpha = 0.7)
D_num <- D_clean %>%
select(c(Avg.Salary.K., Rating, Age, desc_len, comp_count))
D_num %>%
rename('comp' = 'comp_count', 'desc' = 'desc_len', 'avg_S' = 'Avg.Salary.K.') %>%
ggcorr(palette = "RdBu", label = TRUE)
visualize_text <- function(x) {
# x is a character vector
# the function will extract
frequent_words <- termFreq(x)
frequent_words <- frequent_words[!(names(frequent_words) %in% stopwords())]
wordcloud(words = names(frequent_words),
freq = frequent_words, min.freq = 0,
max.words = 100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(9, "Dark2"))
}
visualize_text(D_clean$cleaned_text)
library(tm)
library(wordcloud)
corpus <- VCorpus(VectorSource(D_clean$cleaned_text))
dtm <- DocumentTermMatrix(corpus)
words_freq <- termFreq(D_clean$cleaned_text)
frequent_words <- words_freq[words_freq >= 40]
length(frequent_words)
frequent_words <- frequent_words[!(names(frequent_words) %in% stopwords())]
dtm <- dtm[ , names(frequent_words)]
dim(dtm)
D_dtm <- dtm %>%
as.matrix %>%
as_tibble %>%
mutate(Y = D_clean$Avg.Salary.K.)
head(D_dtm)
library(dplyr)
library(ggplot2)
library(caret)
library(earth)
library(vip)       # for variable importance
library(pdp)       # for variable relationships
set.seed(8888)
ind_mars <- which(runif(nrow(D_dtm)) < 0.7)
train_mars <- D_dtm %>% slice(ind_nn)
library(dplyr)
library(ggplot2)
library(caret)
library(earth)
library(vip)       # for variable importance
library(pdp)       # for variable relationships
set.seed(8888)
ind_mars <- which(runif(nrow(D_dtm)) < 0.7)
train_mars <- D_dtm %>% slice(ind_mars)
test_mars <- D_dtm %>% slice(-ind_mars)
library(dplyr)
library(ggplot2)
library(caret)
library(earth)
library(vip)       # for variable importance
library(pdp)       # for variable relationships
set.seed(8888)
ind_mars <- which(runif(nrow(D_dtm)) < 0.7)
train_mars <- D_dtm %>% slice(ind_mars)
test_mars <- D_dtm %>% slice(-ind_mars)
cat("Dimensions of the training dataset are", dim(train_mars), "\n")
cat("Dimensions of the test dataset are", dim(test_mars), "\n")
marsgrid <- expand.grid(
degree = 1:3,
nprune = seq(1, 100, length.out = 10) %>% floor()
)
View(marsgrid)
set.seed(9999)
mars_cv <- train(
x = subset(train_mars, select = -Y),
y = train_mars$Y,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid
)
View(test_mars)
set.seed(9999)
mars_cv <- train(
x = train_mars %>% select(-Y),
y = train_mars$Y,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid
)
View(test_mars)
class(train_mars)
set.seed(9999)
mars_cv <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid
)
# Result:
mars_cv$bestTune
mars_cv$results %>%
filter(nprune == mars_cv$bestTune$nprune, degree == mars_cv$bestTune$degree)
ggplot(mars_cv)
marsgrid <- expand.grid(
degree = 1:3,
nprune = seq(1, 1000, length.out = 10) %>% floor()
)
View(marsgrid)
marsgrid <- expand.grid(
degree = 1:3,
nprune = seq(1, 1000, length.out = 20) %>% floor()
)
marsgrid <- expand.grid(
degree = 1:3,
nprune = seq(1, 1200, length.out = 20) %>% floor()
)
set.seed(9999)
mars_cv <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid
)
mars_cv$bestTune #nprune = 12, degree = 2
mars_cv$results %>%
filter(nprune == mars_cv$bestTune$nprune, degree == mars_cv$bestTune$degree)
ggplot(mars_cv)
marsgrid <- expand.grid(
degree = 1:3,
nprune = seq(1, 500, length.out = 10) %>% floor()
)
set.seed(9999)
mars_cv <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid
)
mars_cv$bestTune #nprune = 12, degree = 2
mars_cv$results %>%
filter(nprune == mars_cv$bestTune$nprune, degree == mars_cv$bestTune$degree)
ggplot(mars_cv)
marsgrid <- expand.grid(
degree = 1:3,
nprune = seq(1, 100, length.out = 20) %>% floor()
)
set.seed(9999)
mars_cv <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid
)
mars_cv$bestTune #nprune = 12, degree = 2
mars_cv$results %>%
filter(nprune == mars_cv$bestTune$nprune, degree == mars_cv$bestTune$degree)
ggplot(mars_cv)
plot_GCV <- vip(mars_cv, num_features = 20, geom = "point", value = "gcv") + ggtitle("GCV")
plot_RSS <- vip(mars_cv, num_features = 20, geom = "point", value = "rss") + ggtitle("RSS")
gridExtra::grid.arrange(plot_GCV, plot_RSS, ncol = 2)
set.seed(7777)
marsgrid_tuned <- expand.grid(
degree = 16,
nprune = 2
)
mars_cv_tuned <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid_tuned
)
set.seed(7777)
marsgrid_tuned <- expand.grid(
degree = 2,
nprune = 16
)
mars_cv_tuned <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid_tuned
)
pred_mars = predict(mars_cv_tuned, test_mars)
print(caret::MAE(test_dtm$Y, pred_y))
set.seed(7777)
marsgrid_tuned <- expand.grid(
degree = 2,
nprune = 16
)
mars_cv_tuned <- train( Y~., data = train_mars,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = marsgrid_tuned
)
pred_mars = predict(mars_cv_tuned, test_mars)
print(caret::MAE(test_mars$Y, pred_mars))
print(caret::RMSE(test_mars$Y, pred_mars))
